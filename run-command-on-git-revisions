#!/usr/bin/env ruby
# vim: ft=ruby

require 'getoptlong'

module GitCommand

  def self.init
    $verbose = false
    $stop_on_true, $stop_on_false = false, false
    $start_ref, $end_ref = '', ''
    $test_command = ''
  end

  def self.abort_if_dirty_repo
    if !system('git diff-index --quiet --cached HEAD')
      warn "You have staged but not committed changes that would be lost! Aborting."
      exit 1
    end
    if !system('git diff-files --quiet')
      warn "You have unstaged changes that would be lost! Aborting."
      exit 1
    end
    untracked=%x(git ls-files --exclude-standard --others)
    if untracked.length > 0
      warn "You have untracked files that could be overwritten! Aborting."
      exit 1
    end
  end

  def self.usage
    warn \
      "usage: #{File.basename($0)} [-v] [-t|-f] start_rev end_rev command

 -v verbose output
 -t stop when the command returns true
 -f stop when the command returns false

Default action is to run the command on revisions, ignoring the return
value of the command."
  end

  def self.process_command_line_args
    opts = GetoptLong.new(
      [ '--verbose', '-v', GetoptLong::NO_ARGUMENT ],
      [ '--true',    '-t', GetoptLong::NO_ARGUMENT ],
      [ '--false',   '-f', GetoptLong::NO_ARGUMENT ],
    )
    opts.each do |opt, arg|
      case opt
      when '--verbose'
        $verbose = true
      when '--true'
        $stop_on_true = true
      when '--false'
        $stop_on_false = true
      end
    end
    $start_ref, $end_ref = ARGV.shift, ARGV.shift
    $test_command = ARGV.shift
    if $start_ref == nil
      warn "Missing start reference"
      usage; exit(1)
    end
    if $end_ref == nil
      warn "Missing end reference"
      usage; exit(1)
    end
    if $test_command == nil
      warn "Missing command"
      usage; exit(1)
    end
  end

  def self.run_command *args
    cmd = args.length > 1 ? args[1] : args[0]
    debug "---> #{cmd}"
    if args.length > 1 && args[0] == :d
      system(cmd)
    else
      output=`#{cmd}`
      output.split(/\n/)
    end
  end

  def self.debug output
    warn output
  end

  def self.run_tests
    run_command("git rev-list --reverse '#{$start_ref}'..'#{$end_ref}'").each do |rev|
      debug "Checking out: #{`git log --oneline -1 #{rev}`}"
      run_command :d, "git checkout --quiet #{rev}"
      puts "(command)> #{$test_command}"
      result = system($test_command)
      if result == true and $stop_on_true == true
        exit 1
      elsif result == false and $stop_on_false == true
        exit 1
      end
      run_command :d, "git reset --hard --quiet"
    end
    run_command :d, "git checkout --quiet #{$end_ref}"
  end

  def self.run
    process_command_line_args
    abort_if_dirty_repo
    run_tests
  end
end

GitCommand.run
